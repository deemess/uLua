Pos   Hex Data           Description or Code
------------------------------------------------------------------------
0000                     ** source chunk: alltest.luc
                         ** global header start **
0000  1B4C7561           header signature: "\27Lua"
0004  51                 version (major:minor hex digits)
0005  00                 format (0=official)
0006  01                 endianness (1=little endian)
0007  04                 size of int (bytes)
0008  04                 size of size_t (bytes)
0009  04                 size of Instruction (bytes)
000A  08                 size of number (bytes)
000B  00                 integral (1=integral)
                         * number type: double
                         * x86 standard (32-bit, little endian, doubles)
                         ** global header end **
                         
000C                     ** function [0] definition (level 1)
                         ** start of function **
000C  00000000           string size (0)
                         source name: (none)
0010  00000000           line defined (0)
0014  00000000           last line defined (0)
0018  00                 nups (0)
0019  00                 numparams (0)
001A  02                 is_vararg (2)
001B  06                 maxstacksize (6)
                         * code:
001C  6D000000           sizecode (109)
0020  24000000           [001] closure    0   0        ; 0 upvalues
0024  07000000           [002] setglobal  0   0        ; loadtest
0028  05000000           [003] getglobal  0   0        ; loadtest
002C  1C408000           [004] call       0   1   1  
0030  01400000           [005] loadk      0   1        ; 1
0034  41800000           [006] loadk      1   2        ; 3
0038  81400000           [007] loadk      2   1        ; 1
003C  20800080           [008] forprep    0   3        ; to [12]
0040  05C10000           [009] getglobal  4   3        ; print
0044  40018001           [010] move       5   3      
0048  1C410001           [011] call       4   2   1  
004C  1FC0FE7F           [012] forloop    0   -4       ; to [9] if loop
0050  01800000           [013] loadk      0   2        ; 3
0054  41400000           [014] loadk      1   1        ; 1
0058  81000100           [015] loadk      2   4        ; -1
005C  20800080           [016] forprep    0   3        ; to [20]
0060  05C10000           [017] getglobal  4   3        ; print
0064  40018001           [018] move       5   3      
0068  1C410001           [019] call       4   2   1  
006C  1FC0FE7F           [020] forloop    0   -4       ; to [17] if loop
0070  24400000           [021] closure    0   1        ; 0 upvalues
0074  07400100           [022] setglobal  0   5        ; newCounter
0078  05400100           [023] getglobal  0   5        ; newCounter
007C  1C808000           [024] call       0   1   2  
0080  07800100           [025] setglobal  0   6        ; c1
0084  05C00000           [026] getglobal  0   3        ; print
0088  45800100           [027] getglobal  1   6        ; c1
008C  5C008000           [028] call       1   1   0  
0090  1C400000           [029] call       0   0   1  
0094  05C00000           [030] getglobal  0   3        ; print
0098  45800100           [031] getglobal  1   6        ; c1
009C  5C008000           [032] call       1   1   0  
00A0  1C400000           [033] call       0   0   1  
00A4  05C00000           [034] getglobal  0   3        ; print
00A8  45800100           [035] getglobal  1   6        ; c1
00AC  5C008000           [036] call       1   1   0  
00B0  1C400000           [037] call       0   0   1  
00B4  24800000           [038] closure    0   2        ; 0 upvalues
00B8  07C00100           [039] setglobal  0   7        ; func1
00BC  24C00000           [040] closure    0   3        ; 0 upvalues
00C0  07000200           [041] setglobal  0   8        ; func2
00C4  01400000           [042] loadk      0   1        ; 1
00C8  07400200           [043] setglobal  0   9        ; a
00CC  01800000           [044] loadk      0   2        ; 3
00D0  07800200           [045] setglobal  0   10       ; b
00D4  01000300           [046] loadk      0   12       ; 3.5
00D8  07C00200           [047] setglobal  0   11       ; c
00DC  05C00100           [048] getglobal  0   7        ; func1
00E0  45400200           [049] getglobal  1   9        ; a
00E4  85800200           [050] getglobal  2   10       ; b
00E8  1C808001           [051] call       0   3   2  
00EC  07400300           [052] setglobal  0   13       ; result1
00F0  05000200           [053] getglobal  0   8        ; func2
00F4  45400200           [054] getglobal  1   9        ; a
00F8  85800200           [055] getglobal  2   10       ; b
00FC  C5C00200           [056] getglobal  3   11       ; c
0100  1C800002           [057] call       0   4   2  
0104  07800300           [058] setglobal  0   14       ; result2
0108  05C00000           [059] getglobal  0   3        ; print
010C  41C00300           [060] loadk      1   15       ; "Result1 = "
0110  85400300           [061] getglobal  2   13       ; result1
0114  1C408001           [062] call       0   3   1  
0118  05C00000           [063] getglobal  0   3        ; print
011C  41000400           [064] loadk      1   16       ; "Result2 = "
0120  85800300           [065] getglobal  2   14       ; result2
0124  1C408001           [066] call       0   3   1  
0128  01400400           [067] loadk      0   17       ; 2
012C  41800400           [068] loadk      1   18       ; 4
0130  8E400089           [069] mul        2   274 1    ; 4
0134  8C800000           [070] add        2   0   2  
0138  D1408088           [071] pow        3   273 1    ; 2
013C  CFC00000           [072] div        3   0   3  
0140  D080C001           [073] mod        3   3   258  ; 3
0144  0DC00001           [074] sub        0   2   3  
0148  85C00000           [075] getglobal  2   3        ; print
014C  C1C00400           [076] loadk      3   19       ; "a + 4 * b - a / 2 ^ b % 3 = "
0150  00010000           [077] move       4   0      
0154  9C408001           [078] call       2   3   1  
0158  57400000           [079] eq         1   0   1    ; to [81] if false
015C  16800080           [080] jmp        3            ; to [84]
0160  85C00000           [081] getglobal  2   3        ; print
0164  C1000500           [082] loadk      3   20       ; "a != b"
0168  9C400001           [083] call       2   2   1  
016C  18008000           [084] lt         0   1   0    ; to [86] if true
0170  16800080           [085] jmp        3            ; to [89]
0174  85C00000           [086] getglobal  2   3        ; print
0178  C1400500           [087] loadk      3   21       ; "a > b"
017C  9C400001           [088] call       2   2   1  
0180  19008000           [089] le         0   1   0    ; to [91] if true
0184  16800080           [090] jmp        3            ; to [94]
0188  85C00000           [091] getglobal  2   3        ; print
018C  C1800500           [092] loadk      3   22       ; "a >= b"
0190  9C400001           [093] call       2   2   1  
0194  18400000           [094] lt         0   0   1    ; to [96] if true
0198  16800080           [095] jmp        3            ; to [99]
019C  85C00000           [096] getglobal  2   3        ; print
01A0  C1C00500           [097] loadk      3   23       ; "a < b"
01A4  9C400001           [098] call       2   2   1  
01A8  19400000           [099] le         0   0   1    ; to [101] if true
01AC  16800080           [100] jmp        3            ; to [104]
01B0  85C00000           [101] getglobal  2   3        ; print
01B4  C1000600           [102] loadk      3   24       ; "a <= b"
01B8  9C400001           [103] call       2   2   1  
01BC  17400000           [104] eq         0   0   1    ; to [106] if true
01C0  16800080           [105] jmp        3            ; to [109]
01C4  85C00000           [106] getglobal  2   3        ; print
01C8  C1400600           [107] loadk      3   25       ; "a == b"
01CC  9C400001           [108] call       2   2   1  
01D0  1E008000           [109] return     0   1      
                         * constants:
01D4  1A000000           sizek (26)
01D8  04                 const type 4
01D9  09000000           string size (9)
01DD  6C6F616474657374+  "loadtest"
01E5  00                 "\0"
                         const [0]: "loadtest"
01E6  03                 const type 3
01E7  000000000000F03F   const [1]: (1)
01EF  03                 const type 3
01F0  0000000000000840   const [2]: (3)
01F8  04                 const type 4
01F9  06000000           string size (6)
01FD  7072696E7400       "print\0"
                         const [3]: "print"
0203  03                 const type 3
0204  000000000000F0BF   const [4]: (-1)
020C  04                 const type 4
020D  0B000000           string size (11)
0211  6E6577436F756E74+  "newCount"
0219  657200             "er\0"
                         const [5]: "newCounter"
021C  04                 const type 4
021D  03000000           string size (3)
0221  633100             "c1\0"
                         const [6]: "c1"
0224  04                 const type 4
0225  06000000           string size (6)
0229  66756E633100       "func1\0"
                         const [7]: "func1"
022F  04                 const type 4
0230  06000000           string size (6)
0234  66756E633200       "func2\0"
                         const [8]: "func2"
023A  04                 const type 4
023B  02000000           string size (2)
023F  6100               "a\0"
                         const [9]: "a"
0241  04                 const type 4
0242  02000000           string size (2)
0246  6200               "b\0"
                         const [10]: "b"
0248  04                 const type 4
0249  02000000           string size (2)
024D  6300               "c\0"
                         const [11]: "c"
024F  03                 const type 3
0250  0000000000000C40   const [12]: (3.5)
0258  04                 const type 4
0259  08000000           string size (8)
025D  726573756C743100   "result1\0"
                         const [13]: "result1"
0265  04                 const type 4
0266  08000000           string size (8)
026A  726573756C743200   "result2\0"
                         const [14]: "result2"
0272  04                 const type 4
0273  0B000000           string size (11)
0277  526573756C743120+  "Result1 "
027F  3D2000             "= \0"
                         const [15]: "Result1 = "
0282  04                 const type 4
0283  0B000000           string size (11)
0287  526573756C743220+  "Result2 "
028F  3D2000             "= \0"
                         const [16]: "Result2 = "
0292  03                 const type 3
0293  0000000000000040   const [17]: (2)
029B  03                 const type 3
029C  0000000000001040   const [18]: (4)
02A4  04                 const type 4
02A5  1D000000           string size (29)
02A9  61202B2034202A20+  "a + 4 * "
02B1  62202D2061202F20+  "b - a / "
02B9  32205E2062202520+  "2 ^ b % "
02C1  33203D2000         "3 = \0"
                         const [19]: "a + 4 * b - a / 2 ^ b % 3 = "
02C6  04                 const type 4
02C7  07000000           string size (7)
02CB  6120213D206200     "a != b\0"
                         const [20]: "a != b"
02D2  04                 const type 4
02D3  06000000           string size (6)
02D7  61203E206200       "a > b\0"
                         const [21]: "a > b"
02DD  04                 const type 4
02DE  07000000           string size (7)
02E2  61203E3D206200     "a >= b\0"
                         const [22]: "a >= b"
02E9  04                 const type 4
02EA  06000000           string size (6)
02EE  61203C206200       "a < b\0"
                         const [23]: "a < b"
02F4  04                 const type 4
02F5  07000000           string size (7)
02F9  61203C3D206200     "a <= b\0"
                         const [24]: "a <= b"
0300  04                 const type 4
0301  07000000           string size (7)
0305  61203D3D206200     "a == b\0"
                         const [25]: "a == b"
                         * functions:
030C  04000000           sizep (4)
                         
0310                     ** function [0] definition (level 2)
                         ** start of function **
0310  00000000           string size (0)
                         source name: (none)
0314  02000000           line defined (2)
0318  07000000           last line defined (7)
031C  00                 nups (0)
031D  00                 numparams (0)
031E  00                 is_vararg (0)
031F  0B                 maxstacksize (11)
                         * code:
0320  0E000000           sizecode (14)
0324  81000000           [01] loadk      2   0        ; 0
0328  C3000002           [02] loadnil    3   4      
032C  42018000           [03] loadbool   5   1   0    ; true
0330  82010000           [04] loadbool   6   0   0    ; false
0334  C5410000           [05] getglobal  7   1        ; print
0338  00020000           [06] move       8   0      
033C  40028000           [07] move       9   1      
0340  80020001           [08] move       10  2      
0344  DC410002           [09] call       7   4   1  
0348  C5410000           [10] getglobal  7   1        ; print
034C  00028002           [11] move       8   5      
0350  40020003           [12] move       9   6      
0354  DC418001           [13] call       7   3   1  
0358  1E008000           [14] return     0   1      
                         * constants:
035C  02000000           sizek (2)
0360  03                 const type 3
0361  0000000000000000   const [0]: (0)
0369  04                 const type 4
036A  06000000           string size (6)
036E  7072696E7400       "print\0"
                         const [1]: "print"
                         * functions:
0374  00000000           sizep (0)
                         * lines:
0378  00000000           sizelineinfo (0)
                         [pc] (line)
                         * locals:
037C  00000000           sizelocvars (0)
                         * upvalues:
0380  00000000           sizeupvalues (0)
                         ** end of function **

                         
0384                     ** function [1] definition (level 2)
                         ** start of function **
0384  00000000           string size (0)
                         source name: (none)
0388  14000000           line defined (20)
038C  1A000000           last line defined (26)
0390  00                 nups (0)
0391  00                 numparams (0)
0392  00                 is_vararg (0)
0393  02                 maxstacksize (2)
                         * code:
0394  05000000           sizecode (5)
0398  01000000           [1] loadk      0   0        ; 0
039C  64000000           [2] closure    1   0        ; 1 upvalues
03A0  00000000           [3] move       0   0      
03A4  5E000001           [4] return     1   2      
03A8  1E008000           [5] return     0   1      
                         * constants:
03AC  01000000           sizek (1)
03B0  03                 const type 3
03B1  0000000000000000   const [0]: (0)
                         * functions:
03B9  01000000           sizep (1)
                         
03BD                     ** function [0] definition (level 3)
                         ** start of function **
03BD  00000000           string size (0)
                         source name: (none)
03C1  16000000           line defined (22)
03C5  19000000           last line defined (25)
03C9  01                 nups (1)
03CA  00                 numparams (0)
03CB  00                 is_vararg (0)
03CC  02                 maxstacksize (2)
                         * code:
03CD  06000000           sizecode (6)
03D1  04000000           [1] getupval   0   0      
03D5  0C004000           [2] add        0   0   256  ; 1
03D9  08000000           [3] setupval   0   0      
03DD  04000000           [4] getupval   0   0      
03E1  1E000001           [5] return     0   2      
03E5  1E008000           [6] return     0   1      
                         * constants:
03E9  01000000           sizek (1)
03ED  03                 const type 3
03EE  000000000000F03F   const [0]: (1)
                         * functions:
03F6  00000000           sizep (0)
                         * lines:
03FA  00000000           sizelineinfo (0)
                         [pc] (line)
                         * locals:
03FE  00000000           sizelocvars (0)
                         * upvalues:
0402  00000000           sizeupvalues (0)
                         ** end of function **

                         * lines:
0406  00000000           sizelineinfo (0)
                         [pc] (line)
                         * locals:
040A  00000000           sizelocvars (0)
                         * upvalues:
040E  00000000           sizeupvalues (0)
                         ** end of function **

                         
0412                     ** function [2] definition (level 2)
                         ** start of function **
0412  00000000           string size (0)
                         source name: (none)
0416  22000000           line defined (34)
041A  25000000           last line defined (37)
041E  00                 nups (0)
041F  02                 numparams (2)
0420  00                 is_vararg (0)
0421  03                 maxstacksize (3)
                         * code:
0422  03000000           sizecode (3)
0426  8C400000           [1] add        2   0   1  
042A  9E000001           [2] return     2   2      
042E  1E008000           [3] return     0   1      
                         * constants:
0432  00000000           sizek (0)
                         * functions:
0436  00000000           sizep (0)
                         * lines:
043A  00000000           sizelineinfo (0)
                         [pc] (line)
                         * locals:
043E  00000000           sizelocvars (0)
                         * upvalues:
0442  00000000           sizeupvalues (0)
                         ** end of function **

                         
0446                     ** function [3] definition (level 2)
                         ** start of function **
0446  00000000           string size (0)
                         source name: (none)
044A  27000000           line defined (39)
044E  2C000000           last line defined (44)
0452  00                 nups (0)
0453  03                 numparams (3)
0454  00                 is_vararg (0)
0455  05                 maxstacksize (5)
                         * code:
0456  05000000           sizecode (5)
045A  CC400000           [1] add        3   0   1  
045E  0E810001           [2] mul        4   2   2  
0462  CC008101           [3] add        3   3   4  
0466  DE000001           [4] return     3   2      
046A  1E008000           [5] return     0   1      
                         * constants:
046E  00000000           sizek (0)
                         * functions:
0472  00000000           sizep (0)
                         * lines:
0476  00000000           sizelineinfo (0)
                         [pc] (line)
                         * locals:
047A  00000000           sizelocvars (0)
                         * upvalues:
047E  00000000           sizeupvalues (0)
                         ** end of function **

                         * lines:
0482  00000000           sizelineinfo (0)
                         [pc] (line)
                         * locals:
0486  00000000           sizelocvars (0)
                         * upvalues:
048A  00000000           sizeupvalues (0)
                         ** end of function **

048E                     ** end of chunk **
